<%= form_with url: form_url, method: :get, local: true, class: "container mt-4" do %>
  <div class="flex flex-wrap items-center justify-between">
    
    <!-- Search Bar Container -->
    <% if show_text_search %>
      <div class="flex-grow max-w-xl w-full relative mb-4 min-w-[16rem] <%= I18n.locale == :ar ? 'ml-auto' : 'mr-auto' %>">
        
        <!-- Search Input -->
        <%= text_field_tag :search, params[:search], placeholder: text_search_placeholder, 
            class: "w-full pr-12 py-2 focus:outline-none #{I18n.locale == :ar ? 'pl-10' : 'pr-12'}", 
            style: "border: 3px solid #471815; color: #471815; border-radius: 0.25rem;", 
            onchange: "this.form.submit();" %>

        <!-- Conditional Search Button/Icon Position based on Language Direction -->
        <button type="submit" class="absolute inset-y-0 <%= I18n.locale == :ar ? 'left-0 pl-3' : 'right-2' %> flex items-center"> 
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" style="color: #471815;">
            <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-4.35-4.35M11 18a7 7 0 100-14 7 7 0 000 14z" />
          </svg>
        </button>
      
      </div>
    <% end %>

    <!-- Filters Section -->
    <div class="flex flex-wrap items-center">

      <!-- Address Field Container -->
      <% if show_address_field %>
        <div class="w-auto mb-4 min-w-[16rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
          <%= text_field_tag :address, params[:address], id: "address", placeholder: t('search.resources.location_input'),
            class: "w-full pr-12 py-2 focus:outline-none #{I18n.locale == :ar ? 'pl-10' : 'pr-12'} address-input", 
            style: "border: 3px solid #471815; color: #471815; border-radius: 0.25rem;" %>
          <div class="suggestions-container" id="suggestions" style="border: 1px solid #ccc; max-height: 200px; overflow-y: auto;"></div>
        </div>

        <!-- Radius Field Container -->
        <div class="w-auto mb-4 min-w-[16rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
          <%= number_field_tag :radius, params[:radius], placeholder: t('search.resources.radius_input', default: 'Radius (miles)'), 
              class: "w-full pr-12 py-2 focus:outline-none #{I18n.locale == :ar ? 'pl-10' : 'pr-12'}", 
              style: "border: 3px solid #471815; color: #471815; border-radius: 0.25rem;", 
              onchange: "this.form.submit();" %>
        </div>
      <% end %>

      <% if show_major_filter %>
        <div class="w-auto mb-4 min-w-[16rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
          <%= select_tag :major, options_for_select(major_options, params[:major]), include_blank: 'All Majors', class: "w-full rounded-full text-sm px-4 py-3 font-semibold", style: "border: 3px solid #471815; color: #471815;", onchange: 'this.form.submit();' %>
        </div>
      <% end %>

      <% if show_class_year_filter %>
        <div class="w-auto mb-4 min-w-[12rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
          <%= select_tag :class_year, options_for_select(class_year_options, params[:class_year]), include_blank: 'All Class Years', class: "w-full rounded-full text-sm px-4 py-3 font-semibold", style: "border: 3px solid #471815; color: #471815;", onchange: 'this.form.submit();' %>
        </div>
      <% end %>

      <% if show_log_action_filter %>
        <div class="w-auto mb-4 min-w-[12rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
          <%= select_tag :log_action, options_for_select(
            ['Created Resource Proposal',
            'Updated Resource',
            'Deleted Resource Type',
            'Updated Resource Type',
            'Created Resource Type',
            'Failed to Create Resource Type',
            'Deleted Resource',
            'Archived Resource',
            'Approved Resource',
            'Reinstated Resource',
            'User Resource Proposal Updated'],
            selected: params[:log_action]), prompt: t("search.logs.filter_by_action"), class: "w-full rounded-full text-sm px-4 py-3 font-semibold", style: "border: 3px solid #471815; color: #471815;", onchange: 'this.form.submit();' %>
        </div>
      <% end %>

      <div class="flex items-center">
        <% if show_per_page %>
          <div class="w-30 mb-4 min-w-[5rem] <%= I18n.locale == :ar ? 'ml-4' : 'mr-4' %>">
            <%= select_tag :per_page, options_for_select([5, 10, 20], params[:per_page] || 10), onchange: 'this.form.submit();', class: "w-full rounded-full text-sm px-4 py-3 font-semibold", style: "border: 3px solid #471815; color: #471815;" %>
          </div>
        <% end %>

        <!-- Apply Filter Button -->
        <div class="mb-4">
          <%= submit_tag t('search.search_button', default: 'Search'), class: "rounded-full text-sm px-4 py-2 font-semibold", style: "background-color: #471815; color: white; border-radius: 0.25rem; height: 2.75rem; min-width: auto;" %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const autocompleteInput = document.getElementById("address");
  const suggestionsContainer = document.getElementById("suggestions");

  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  function fetchSuggestions() {
    const query = autocompleteInput.value.trim();

    if (query.length > 2) {
      const encodedQuery = encodeURIComponent(query);
      fetch(`/resources/address_suggestions?query=${encodedQuery}`)
        .then((response) => response.json())
        .then((data) => {
          showSuggestions(data);
        })
        .catch((error) => console.error("Error fetching suggestions:", error));
    }
  }

  const debouncedFetchSuggestions = debounce(fetchSuggestions, 300);
  autocompleteInput.addEventListener("input", debouncedFetchSuggestions);

  function showSuggestions(suggestions) {
    suggestionsContainer.innerHTML = "";

    suggestions.forEach((suggestion) => {
      const suggestionItem = document.createElement("div");
      suggestionItem.style.cursor = "pointer";
      suggestionItem.innerText = suggestion;

      suggestionItem.addEventListener("click", () => {
        autocompleteInput.value = suggestion;
        suggestionsContainer.innerHTML = "";
      });

      suggestionsContainer.appendChild(suggestionItem);
    });
  }
});
</script>
